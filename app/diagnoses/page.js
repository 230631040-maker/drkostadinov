"use client";
import { useMemo, useState } from "react";

// –ì–ª–∞–≤–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ F00‚ÄìF98
const categoriesInit = [
  { code: "F00-F09", name: "F00‚ÄìF09 –û—Ä–≥–∞–Ω–∏—á–Ω–∏, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏—á–Ω–∏, –ø—Å–∏—Ö–∏—á–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", icon: "üß†", diagnoses: [] },
  { code: "F10-F19", name: "F10‚ÄìF19 –ü—Å–∏—Ö–∏—á–Ω–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥—ä–ª–∂–∞—â–∏ —Å–µ –Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞ –Ω–∞ –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω–∏ –≤–µ—â–µ—Å—Ç–≤–∞", icon: "üç∫", diagnoses: [] },
  { code: "F20-F29", name: "F20‚ÄìF29 –®–∏–∑–æ—Ñ—Ä–µ–Ω–∏—è, —à–∏–∑–æ—Ç–∏–ø–Ω–∏ –∏ –Ω–∞–ª—É–¥–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", icon: "üåÄ", diagnoses: [] },
  { code: "F30-F39", name: "F30‚ÄìF39 –†–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ—Ç–æ (–∞—Ñ–µ–∫—Ç–∏–≤–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)", icon: "üåó", diagnoses: [] },
  { code: "F40-F48", name: "F40‚ÄìF48 –ù–µ–≤—Ä–æ—Ç–∏—á–Ω–∏, —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å—ä—Å —Å—Ç—Ä–µ—Å –∏ —Å–æ–º–∞—Ç–æ—Ñ–æ—Ä–º–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", icon: "üò∞", diagnoses: [] },
  { code: "F50-F59", name: "F50‚ÄìF59 –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏ —Å–∏–Ω–¥—Ä–æ–º–∏, —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–æ–º–∞—Ç–∏—á–Ω–∏ —Ñ–∞–∫—Ç–æ—Ä–∏", icon: "üçΩÔ∏è", diagnoses: [] },
  { code: "F60-F69", name: "F60‚ÄìF69 –†–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ—Ç–æ –≤ –∑—Ä—è–ª–∞ –≤—ä–∑—Ä–∞—Å—Ç", icon: "üß©", diagnoses: [] },
  { code: "F70-F79", name: "F70‚ÄìF79 –£–º—Å—Ç–≤–µ–Ω–∞ –∏–∑–æ—Å—Ç–∞–Ω–∞–ª–æ—Å—Ç", icon: "üìâ", diagnoses: [] },
  { code: "F80-F89", name: "F80‚ÄìF89 –†–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω–æ—Ç–æ —Ä–∞–∑–≤–∏—Ç–∏–µ", icon: "üßí", diagnoses: [] },
  { code: "F90-F98", name: "F90‚ÄìF98 –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏ –∏ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∏ —Ä–∞–∑—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –Ω–∞—á–∞–ª–æ, —Ç–∏–ø–∏—á–Ω–æ –∑–∞ –¥–µ—Ç—Å—Ç–≤–æ—Ç–æ –∏ —é–Ω–æ—à–µ—Å—Ç–≤–æ—Ç–æ", icon: "üéà", diagnoses: [] }
];

export default function DiagnosesPage() {
  const [categories, setCategories] = useState(categoriesInit);
  const firstCode = categories.length > 0 ? categories[0].code : null;
  const [selectedCode, setSelectedCode] = useState(firstCode);
  const [form, setForm] = useState({ code: "", name: "", description: "", symptoms: "", treatment_med: "", treatment_psych: "", prognosis: "" });

  const selectedCategory = useMemo(
    () => categories.find((c) => c.code === selectedCode) || categories[0],
    [selectedCode, categories]
  );

  const addDiagnosis = () => {
    if (!form.code || !form.name) return;
    const updated = categories.map((cat) => {
      if (cat.code === selectedCategory.code) {
        return { ...cat, diagnoses: [...cat.diagnoses, form] };
      }
      return cat;
    });
    setCategories(updated);
    setForm({ code: "", name: "", description: "", symptoms: "", treatment_med: "", treatment_psych: "", prognosis: "" });
  };

  return (
    <div className="grid grid-cols-4 gap-6">
      {/* Sidebar */}
      <aside className="col-span-1 bg-white rounded-xl p-4 shadow">
        <h2 className="text-xl font-bold mb-4 text-[#212845]">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <ul className="space-y-2">
          {categories.map((cat) => (
            <li key={cat.code}>
              <button
                onClick={() => setSelectedCode(cat.code)}
                className={`w-full text-left p-2 rounded flex items-center gap-2 font-medium transition ${
                  selectedCode === cat.code
                    ? "bg-[#212845] text-white"
                    : "hover:bg-gray-100"
                }`}
              >
                <span>{cat.icon}</span>
                <span>{cat.name}</span>
              </button>
            </li>
          ))}
        </ul>
      </aside>

      {/* Content */}
      <main className="col-span-3">
        <h2 className="text-2xl font-bold mb-4 text-[#212845]">
          {selectedCategory.name}
        </h2>

        {/* –§–æ—Ä–º–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ */}
        <div className="rounded-xl bg-white p-6 shadow grid gap-3 mb-6">
          <h3 className="text-xl font-semibold text-[#D6628D]">–î–æ–±–∞–≤–∏ –Ω–æ–≤–∞ –¥–∏–∞–≥–Ω–æ–∑–∞</h3>
          <input placeholder="–ö–æ–¥ (–Ω–∞–ø—Ä. F00)" value={form.code} onChange={(e) => setForm({ ...form, code: e.target.value })} className="border p-2 rounded" />
          <input placeholder="–ò–º–µ" value={form.name} onChange={(e) => setForm({ ...form, name: e.target.value })} className="border p-2 rounded" />
          <textarea placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} className="border p-2 rounded" />
          <textarea placeholder="–°–∏–º–ø—Ç–æ–º–∏" value={form.symptoms} onChange={(e) => setForm({ ...form, symptoms: e.target.value })} className="border p-2 rounded" />
          <textarea placeholder="–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ –ª–µ—á–µ–Ω–∏–µ" value={form.treatment_med} onChange={(e) => setForm({ ...form, treatment_med: e.target.value })} className="border p-2 rounded" />
          <textarea placeholder="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞ –ø–æ–¥–∫—Ä–µ–ø–∞" value={form.treatment_psych} onChange={(e) => setForm({ ...form, treatment_psych: e.target.value })} className="border p-2 rounded" />
          <textarea placeholder="–ü—Ä–æ–≥–Ω–æ–∑–∞" value={form.prognosis} onChange={(e) => setForm({ ...form, prognosis: e.target.value })} className="border p-2 rounded" />
          <button onClick={addDiagnosis} className="bg-[#212845] text-white py-2 rounded">–î–æ–±–∞–≤–∏</button>
        </div>

        {/* –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –¥–∏–∞–≥–Ω–æ–∑–∏ */}
        <div className="grid gap-6">
          {selectedCategory.diagnoses.map((d, i) => (
            <div key={i} className="rounded-xl bg-white p-6 shadow grid gap-3">
              <h3 className="text-xl font-semibold text-[#D6628D]">
                {d.code} ‚Äì {d.name}
              </h3>
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {d.description}</p>
              <p><strong>–°–∏–º–ø—Ç–æ–º–∏:</strong> {d.symptoms}</p>
              <p><strong>–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ –ª–µ—á–µ–Ω–∏–µ:</strong> {d.treatment_med}</p>
              <p><strong>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞ –ø–æ–¥–∫—Ä–µ–ø–∞:</strong> {d.treatment_psych}</p>
              <p><strong>–ü—Ä–æ–≥–Ω–æ–∑–∞:</strong> {d.prognosis}</p>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}
